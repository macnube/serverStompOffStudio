type User {
  id: ID! @unique
  email: String @unique
  password: String!
  name: String!
  admin: Boolean! @default(value: "false")
}

type Student {
    id: ID! @unique
    name: String! @unique
    email: String! @unique
    mobile: String
    courses: [CourseStudent!] @relation(name: "CourseInstanceByStudent" onDelete: CASCADE)
    cards: [Card!]
    hasReferralBonus: Boolean! @default(value: "false")
    payments: [Payment!]
}

type Course {
    id: ID! @unique
    name: String!
    description: String
    startDate: DateTime
    startTime: String
    duration: Int
    teachers: [Teacher!]
    courseStudents: [CourseStudent!] @relation(name: "CourseInstanceByClass" onDelete: CASCADE)
    instances: [CourseInstance!] @relation(name: "InstanceByCourse" onDelete: CASCADE)
    studentLimit: Int
    room: Room
}

enum ParticipantStatus {
    PRESENT, ABSENT
}

type Participant {
    id: ID! @unique
    courseStudent: CourseStudent!
    courseInstance: CourseInstance! @relation(name: "ParticipantByInstance")
    status: ParticipantStatus!
}

enum DanceRole {
    LEADER, FOLLOWER, SOLO
}

type CourseStudent {
    id: ID! @unique
    student: Student! @relation(name: "CourseInstanceByStudent")
    course: Course! @relation(name: "CourseInstanceByClass")
    role: DanceRole!
}

type Teacher {
    id: ID! @unique
    name: String!
    email: String!
    mobile: String
    courses: [Course!]
}

type CourseInstance {
    id: ID! @unique
    course: Course @relation(name: "InstanceByCourse")
    date: DateTime
    topic: String
    notes: String
    participants: [Participant!] @relation(name: "ParticipantByInstance" onDelete: CASCADE)
    recapUrl: String
}

type Card {
    id: ID! @unique
    student: Student!
    payment: Payment
    expirationDate: DateTime
    active: Boolean! @default(value: "true")
    validCount: Int!
    useHistory: [CourseInstance]
}

enum PaymentType {
    CARD, PRIVATE, DROP_IN
}

type Payment {
    id: ID! @unique
    type: PaymentType!
    date: DateTime!
    amount: Int!
    student: Student
    card: Card
}

type Studio {
    id: ID! @unique
    name: String @unique
    rooms: [Room!] @relation(name: "RoomsByStudio" onDelete: CASCADE)
    address: String
}

type Room {
    id: ID! @unique
    name: String
    capacity: Int
    studio: Studio! @relation(name: "RoomsByStudio")
}


