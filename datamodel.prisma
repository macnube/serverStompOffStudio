type User {
  id: ID! @id
  updatedAt: DateTime! @updatedAt
  createdAt: DateTime! @createdAt
  email: String @unique
  password: String!
  student: Student @relation(link: INLINE)
  admin: Boolean! @default(value: false)
}

type LoginResponse {
  id: ID! @id
  updatedAt: DateTime! @updatedAt
  createdAt: DateTime! @createdAt
  token: String
  user: User
}

type Student {
    id: ID! @id
    updatedAt: DateTime! @updatedAt
    createdAt: DateTime! @createdAt
    name: String! @unique
    email: String! @unique
    mobile: String
    memberships: [Membership!] @relation(link: TABLE name: "MembershipByStudent" onDelete: CASCADE)
    cards: [Card!]
    hasReferralBonus: Boolean! @default(value: false)
    payments: [Payment!]
    user: User
}

enum CourseDay {
    MON, TUE, WED, THU, FRI, SAT, SUN
}

type Course {
    id: ID! @id
    updatedAt: DateTime! @updatedAt
    createdAt: DateTime! @createdAt
    name: String!
    description: String
    startDate: DateTime
    startTime: String
    day: CourseDay
    duration: Int
    teachers: [Teacher!]
    memberships: [Membership!] @relation(link: TABLE name: "MembershipByCourse" onDelete: CASCADE)
    instances: [CourseInstance!] @relation(link: TABLE name: "InstanceByCourse" onDelete: CASCADE)
    studentLimit: Int
    room: Room
    absences: [CourseAbsence!]
}

type CourseAbsence {
    id: ID! @id
    updatedAt: DateTime! @updatedAt
    createdAt: DateTime! @createdAt
    date: DateTime!
    student: Student!
    course: Course!
}

enum ParticipantStatus {
    PRESENT, ABSENT, NOT_LOGGED, NO_SHOW
}

type Participant {
    id: ID! @id
    updatedAt: DateTime! @updatedAt
    createdAt: DateTime! @createdAt
    membership: Membership!
    courseInstance: CourseInstance! @relation(name: "ParticipantByInstance")
    status: ParticipantStatus @default(value: NOT_LOGGED)
}

enum DanceRole {
    LEADER, FOLLOWER, SOLO
}

enum MembershipStatus {
    ACTIVE, INACTIVE, WAITLIST
}

type Membership {
    id: ID! @id
    updatedAt: DateTime! @updatedAt
    createdAt: DateTime! @createdAt
    student: Student! @relation(name: "MembershipByStudent")
    course: Course! @relation(name: "MembershipByCourse")
    role: DanceRole!
    status: MembershipStatus @default(value: ACTIVE)
    waitlistDate: DateTime
}

type Teacher {
    id: ID! @id
    updatedAt: DateTime! @updatedAt
    createdAt: DateTime! @createdAt
    name: String!
    email: String!
    mobile: String
    courses: [Course!]
    user: User
}

type CourseInstance {
    id: ID! @id
    updatedAt: DateTime! @updatedAt
    createdAt: DateTime! @createdAt
    course: Course @relation(name: "InstanceByCourse")
    date: DateTime!
    topic: String
    notes: String
    participants: [Participant!] @relation(link: TABLE name: "ParticipantByInstance" onDelete: CASCADE)
    recapUrl: String
}

type Card {
    id: ID! @id
    updatedAt: DateTime! @updatedAt
    createdAt: DateTime! @createdAt
    student: Student!
    payment: Payment
    expirationDate: DateTime
    active: Boolean! @default(value: true)
    paid: Boolean! @default(value: false)
    value: Int!
    originalValue: Int!
    participationHistory: [Participant]
}

enum PaymentType {
    CARD, PRIVATE, DROP_IN, OLD_CARD
}

type Payment {
    id: ID! @id
    updatedAt: DateTime! @updatedAt
    createdAt: DateTime! @createdAt
    type: PaymentType!
    date: DateTime!
    amount: Int!
    student: Student
    card: Card @relation(link: INLINE)
}

enum ExpenseType {
    RENT, MISC
}

type Expense {
    id: ID! @id
    updatedAt: DateTime! @updatedAt
    createdAt: DateTime! @createdAt
    type: ExpenseType!
    date: DateTime!
    amount: Int!
    note: String
}

type Studio {
    id: ID! @id
    updatedAt: DateTime! @updatedAt
    createdAt: DateTime! @createdAt
    name: String @unique
    rooms: [Room!] @relation(link: TABLE name: "RoomsByStudio" onDelete: CASCADE)
    address: String
}

type Room {
    id: ID! @id
    updatedAt: DateTime! @updatedAt
    createdAt: DateTime! @createdAt
    name: String
    capacity: Int
    studio: Studio! @relation(name: "RoomsByStudio")
}

type MailgunEmailPayload {
    id: ID! @id
    success: Boolean!
}

