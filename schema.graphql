# import MailgunEmailPayload, User, PaymentOrderByInput, CourseAbsence, Payment, PaymentType, MembershipStatus, Course, CourseDay, CourseInstance, Student, Studio, Room, BatchPayload, Teacher, DanceRole, Participant, ParticipantStatus, Membership, Card from "./generated/prisma.graphql"

scalar Json

type Query {
    teachers: [Teacher!]!
    studios: [Studio!]!
    studio(id: ID!): Studio!
    room(id: ID!): Room!
    roomsByStudio(studioId: ID!): [Room!]!
    studioByRoom(roomId: ID!): Studio!
    courses: [Course!]!
    course(id: ID!): Course!
    coursesByStudent(id: ID!): [Course!]!
    students: [Student!]!
    student(id: ID!): Student!
    payments: [Payment!]!
    unlinkedCardPayments: [Payment!]!
    courseInstance(id: ID!): CourseInstance
    membershipsByCourseInstance(courseInstanceId: ID!): [Membership!]!
    overviewInstances: [CourseInstance!]!
    instancesByStudent(id: ID!): [CourseInstance!]!
    unpaidCardsByStudent(id: ID!): [Card!]!
    unpaidCards: [Card!]!
    studentCards(id: ID!): [Card!]!
    card(id: ID!): Card!
    getParticipantByStudent(id: ID!): Participant
    currentUser: User!
    users: [User!]!
    upcomingAbsencesByStudent(id: ID!): [CourseAbsence!]!
    oldCards: [Card!]!
}

type Mutation {
    login(email: String!, password: String!): LoginResponse!
    createUser(email: String!, password: String!, studentId: ID!): User
    updateUserEmailPassword(email: String, password: String, id: ID!): User
    deleteUser(id: ID!): User
    toggleUserAdminStatus(id: ID!): User
    createTeacher(name: String!, email: String!, mobile: String): Teacher
    deleteTeacher(id: ID!): Teacher
    updateTeacher(
        id: ID!
        name: String!
        email: String!
        mobile: String
    ): Teacher
    createStudio(name: String!, address: String!): Studio
    updateStudio(id: ID!, name: String!, address: String!): Studio
    deleteStudio(id: ID!): Studio
    createRoom(name: String!, capacity: Int!, studioId: ID!): Room
    deleteRoom(id: ID!): Room
    updateRoom(id: ID!, name: String!, capacity: Int!): Room
    createCourse(
        name: String!
        description: String
        startDate: DateTime
        startTime: String
        duration: Int
        studentLimit: Int
        roomId: ID!
        day: CourseDay
    ): Course
    updateCourse(
        id: ID!
        name: String!
        description: String
        startDate: DateTime
        startTime: String
        duration: Int
        studentLimit: Int
        day: CourseDay
    ): Course
    addTeacherToCourse(id: ID!, teacherId: ID!): Course
    removeTeacherFromCourse(id: ID!, teacherId: ID!): Course
    deleteCourse(id: ID!): Course
    createStudent(name: String!, email: String!, mobile: String): Student
    importStudent(
        name: String!
        email: String!
        mobile: String
        role: DanceRole!
        waitlistDate: DateTime!
        courseId: ID!
    ): Student
    deleteStudent(id: ID!): Student
    updateStudent(
        id: ID!
        name: String!
        email: String!
        mobile: String
        hasReferralBonus: Boolean!
    ): Student
    createMembership(
        studentId: ID!
        courseId: ID!
        role: DanceRole!
        status: MembershipStatus
    ): Membership
    deleteMembership(id: ID!): Membership
    updateMembershipStatus(id: ID!, status: MembershipStatus!): Membership
    createCard(studentId: ID!, value: Int!, expirationDate: DateTime!): Card
    updateCard(id: ID!, value: Int!, expirationDate: DateTime!): Card
    deleteCard(id: ID!): Card
    payCard(id: ID!): Card
    unpayCard(id: ID!): Card
    logCardParticipation(id: ID!, participantId: ID!): Card
    removeCardParticipation(id: ID!, participantId: ID!): Card
    deactivateCard(id: ID!): Card
    expireOldCards: BatchPayload!
    createPayment(
        type: PaymentType!
        studentId: ID!
        amount: Int!
        date: DateTime!
        cardId: ID
    ): Payment
    updatePayment(
        id: ID!
        type: PaymentType!
        studentId: ID!
        amount: Int!
        date: DateTime!
        cardId: ID
    ): Payment
    deletePayment(id: ID!): Payment
    createCourseInstance(
        date: DateTime!
        courseId: ID!
        membershipIds: [ID!]!
    ): CourseInstance
    deleteCourseInstance(id: ID!): CourseInstance
    updateCourseInstance(
        id: ID!
        topic: String!
        notes: String
        date: DateTime!
        recapUrl: String
    ): CourseInstance
    addParticipantToCourseInstance(id: ID!, membershipId: ID!): CourseInstance
    deleteParticipant(id: ID!): Participant
    logParticipantStatus(id: ID!, status: ParticipantStatus!): Participant
    logParticipantAbsence(id: ID!): Participant
    clearParticipantAbsence(id: ID!): Participant
    logCourseAbsence(
        date: DateTime!
        courseId: ID!
        studentId: ID!
    ): CourseAbsence
    clearCourseAbsence(id: ID!): CourseAbsence
    sendMailgunEmail(
        tag: String!
        from: String!
        to: [String!]!
        subject: String!
        text: String!
        recipientVariables: Json
    ): MailgunEmailPayload
}
